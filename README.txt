PROJECT TITLE: Simple Cache
PURPOSE OF PROJECT: Emulates the function of a Direct Mapped, Set Associative, or Fully Mapped cache.
DATE: 2022-11-20
HOW TO START THIS PROJECT: User must compile project on own machine.
AUTHORS: Jackson Gray

COMPILE INSTRUCTIONS:
    Place the SimpleCache.java and addresses.txt files in the same directory. Open the terminal and
    navigate to the same directory. Once there, run the following commands:

    javac SimpleCache.java
    java SimpleCache
    
    Once these commands are entered, the program should be running.


USER INSTRUCTIONS:

Addresses are stored in the file "addresses.txt" and can either be auto-generated by the program
or manually inputted by the user. Addresses consist of 32-bit binary strings (consisting only of
1s and 0s) and can either be separated by spaces, carriage returns, or a mix of the two. Note
that this program takes address offset into account, which is 5 for a 32-bit address, so in order
to enter a number like 6 for testing purposes, instead of entering 110, the number 11000000 
should be entered.

Addressess of any length can be entered, but will be corrected within the program to 32-bit
addresses. This is done by adding 0s to the left of the given address or taking the 32 rightmost
bits of the given address, depending on if the given address is shorter or longer than 32 bits.

If desired, one can modify the length of the addresses by changing the ADDRESS_SIZE integer value
before compilation. This is not recommended, however, since testing was done at ADDRESS_SIZE 32
and changing this value will affect the offset, index, and tag values.

Additionally, one can modify the length of the auto-generated address by changing the value of
ADDRESS_GENERATION_SIZE, which is 14 by default. I find that a size of around 13 or 14 gives
enough digits to where the program can safely cut off the offset, have a valid index, and have
varied tag values, but this can be freely changed or completely ignored. 

By default, "addresses.txt" comes loaded with 2 lines of text containing instructions and the
addresses 0, 8, 0, 6, and 8 in binary with 5 zeros attached to the end to account for offset,
as such: 000000 100000000 000000 011000000 100000000. The first two lines of text are skipped 
over in the program, so if addresses are placed there, they will not be read. If deleted, the
first two lines will be regenerated if new addresses are generated by the program.